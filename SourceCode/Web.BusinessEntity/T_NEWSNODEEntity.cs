//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// -------------------------------------------------------------
// 
//             Powered By： SR3.1(SmartRobot For SmartPersistenceLayer 3.1) 听棠
//             Created By： Administrator
//             Created Time： 2016/5/11 13:36:27
// 
// -------------------------------------------------------------
namespace Web.BusinessEntity
{
    using System;
    using System.Collections;
    using System.Data;
    using PersistenceLayer;
    
    
    /// <summary>该类的摘要说明</summary>
    [Serializable()]
    public class T_NEWSNODEEntity : EntityObject
    {
        
        /// <summary>ID</summary>
        public const string @__ID = "ID";
        
        /// <summary>NODENAME</summary>
        public const string @__NODENAME = "NODENAME";
        
        /// <summary>PARENTID</summary>
        public const string @__PARENTID = "PARENTID";
        
        /// <summary>WEBURL</summary>
        public const string @__WEBURL = "WEBURL";
        
        /// <summary>STATUS</summary>
        public const string @__STATUS = "STATUS";
        
        private decimal m_ID;
        
        private string m_NODENAME;
        
        private decimal m_PARENTID;
        
        private string m_WEBURL;
        
        private decimal m_STATUS;
        
        /// <summary>构造函数</summary>
        public T_NEWSNODEEntity()
        {
        }
        
        /// <summary>属性ID </summary>
        public decimal ID
        {
            get
            {
                return this.m_ID;
            }
            set
            {
                this.m_ID = value;
            }
        }
        
        /// <summary>属性NODENAME </summary>
        public string NODENAME
        {
            get
            {
                return this.m_NODENAME;
            }
            set
            {
                this.m_NODENAME = value;
            }
        }
        
        /// <summary>属性PARENTID </summary>
        public decimal PARENTID
        {
            get
            {
                return this.m_PARENTID;
            }
            set
            {
                this.m_PARENTID = value;
            }
        }
        
        /// <summary>属性WEBURL </summary>
        public string WEBURL
        {
            get
            {
                return this.m_WEBURL;
            }
            set
            {
                this.m_WEBURL = value;
            }
        }
        
        /// <summary>属性STATUS </summary>
        public decimal STATUS
        {
            get
            {
                return this.m_STATUS;
            }
            set
            {
                this.m_STATUS = value;
            }
        }
    }
    
    /// T_NEWSNODEEntity执行类
    public abstract class T_NEWSNODEEntityAction
    {
        
        private T_NEWSNODEEntityAction()
        {
        }
        
        public static void Save(T_NEWSNODEEntity obj)
        {
            if (obj!=null)
            {
                obj.Save();
            }
        }
        
        /// <summary>根据主键获取一个实体</summary>
        public static T_NEWSNODEEntity RetrieveAT_NEWSNODEEntity(decimal ID)
        {
            T_NEWSNODEEntity obj=new T_NEWSNODEEntity();
            obj.ID=ID;
            obj.Retrieve();
            if (obj.IsPersistent)
            {
                return obj;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>获取所有实体(EntityContainer)</summary>
        public static EntityContainer RetrieveT_NEWSNODEEntity()
        {
            RetrieveCriteria rc=new RetrieveCriteria(typeof(T_NEWSNODEEntity));
            return rc.AsEntityContainer();
        }
        
        /// <summary>获取所有实体(EntityContainer)</summary>
        public static DataTable GetT_NEWSNODEEntity()
        {
            RetrieveCriteria rc=new RetrieveCriteria(typeof(T_NEWSNODEEntity));
            return rc.AsDataTable();
        }
    }
}
